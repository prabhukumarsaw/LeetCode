link  https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

34. Find First and Last Position of Element in Sorted Array
Medium
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109






code

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> v(2,-1);
        
        int pos1 = lower_bound(nums.begin(),nums.end(),target) - nums.begin();
        int size = nums.size();
        
        if(pos1 != size && nums[pos1] == target){
            v[0] = pos1;
        }
        int pos2 = upper_bound(nums.begin(),nums.end(),target) - nums.begin();
        if(pos2 !=0){
            pos2-=1;
            
            if(pos2 != size && nums[pos2] == target){
                v[1] = pos2;
            }
        }
        return v;
    }
};
